    <class name="cn.tingba.entity.User" table="user" catalog="tingba" 
    		dynamic-insert="true" dynamic-update="true"> 
<!-- 
      4)<property>元素 dynamic-insert属性:设置为true,表示insert对象的时候,生成动态的insert语句,如果这个字段的值是null就不会加入到insert语句当中.默认false
      5)<property>元素 dynamic-update属性,设置为true,表示update对象的时候,生成动态的update语句,如果这个字段的值是null就不会被加入到update语句中,默认false
      6)<class>元素 dynamic-insert属性:设置为true,表示把所有的<property>元素的dynamic-insert属性设置为true,默认false
      7)<class>元素 dynamic-update属性:设置为true,表示把所有的<property>元素的dynamic-update属性设置为true,默认false
-->

<set name="songs" inverse="true" lazy="false"> <!-- lazy="false" 可以让每次查询User时取得关联的songs -->

	public String toString() {
		return String.format("%4d %6s %6s %4s %6s", id, username, password,
				sex, email);
	}


	@Override
	public boolean equals(Object obj) {
		Song rhs = (Song)obj;
		return (int)id == (int)rhs.id;
	}
	
	@Override
	public String toString() {
//		return String.format("%d %5s %5s %4s ", id, name, singer, style)
//				+ user.getId() + "|" + savepath + "|" + uploadTime
//				+ "|" + goodcount + "|" + badcount + "|" + playcount + "|"
//				+ comcount;
		
		return String.format( //JSON格式，方便客户端读取
				"{'id':'%d', 'name':'%s', 'singer':'%s', 'style':'%s', 'description':'%s', 'url': '%s'}",   
				id, name, singer, style, description, savepath);
	}